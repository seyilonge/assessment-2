{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\projects\\\\assessment-2\\\\lib\\\\redux.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport initializeStore from '../redux/store';\nimport App from 'next/app';\nexport const withRedux = (PageComponent, {\n  ssr = true\n} = {}) => {\n  const WithRedux = (_ref) => {\n    let {\n      initialReduxState\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"initialReduxState\"]);\n\n    const store = getOrInitializeStore(initialReduxState);\n    return __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    })));\n  }; // Make sure people don't use this HOC on _app.js level\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const isAppHoc = PageComponent === App || PageComponent.prototype instanceof App;\n\n    if (isAppHoc) {\n      throw new Error('The withRedux HOC only works with PageComponents');\n    }\n  } // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n    WithRedux.displayName = `withRedux(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithRedux.getInitialProps = async context => {\n      // Get or Create the store with `undefined` as initialState\n      // This allows you to set a custom default initialState\n      const reduxStore = getOrInitializeStore(); // Provide the store to getInitialProps of pages\n\n      context.reduxStore = reduxStore; // Run getInitialProps from HOCed PageComponent\n\n      const pageProps = typeof PageComponent.getInitialProps === 'function' ? await PageComponent.getInitialProps(context) : {}; // Pass props to PageComponent\n\n      return _objectSpread({}, pageProps, {\n        initialReduxState: reduxStore.getState()\n      });\n    };\n  }\n\n  return WithRedux;\n};\nlet reduxStore;\n\nconst getOrInitializeStore = initialState => {\n  // Always make a new store if server, otherwise state is shared between requests\n  if (true) {\n    return initializeStore(initialState);\n  } // Create store if unavailable on the client and set it on the window object\n\n\n  if (!reduxStore) {\n    reduxStore = initializeStore(initialState);\n  }\n\n  return reduxStore;\n};","map":{"version":3,"sources":["C:/projects/assessment-2/lib/redux.js"],"names":["React","Provider","initializeStore","App","withRedux","PageComponent","ssr","WithRedux","initialReduxState","props","store","getOrInitializeStore","process","env","NODE_ENV","isAppHoc","prototype","Error","displayName","name","getInitialProps","context","reduxStore","pageProps","getState","initialState"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAEC,aAAF,EAAiB;AAAEC,EAAAA,GAAG,GAAG;AAAR,IAAiB,EAAlC,KAA0C;AAC/D,QAAMC,SAAS,GAAG,UAAuC;AAAA,QAArC;AAAEC,MAAAA;AAAF,KAAqC;AAAA,QAAbC,KAAa;;AACrD,UAAMC,KAAK,GAAGC,oBAAoB,CAAEH,iBAAF,CAAlC;AACA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,aAAD,eAAmBD,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AAKH,GAPD,CAD+D,CAU/D;;;AACA,MAAKG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA9B,EAA6C;AACzC,UAAMC,QAAQ,GAAGV,aAAa,KAAKF,GAAlB,IAAyBE,aAAa,CAACW,SAAd,YAAmCb,GAA7E;;AACA,QAAKY,QAAL,EAAgB;AACZ,YAAM,IAAIE,KAAJ,CAAW,kDAAX,CAAN;AACH;AACJ,GAhB8D,CAkB/D;;;AACA,MAAKL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA9B,EAA6C;AACzC,UAAMI,WAAW,GAAGb,aAAa,CAACa,WAAd,IAA6Bb,aAAa,CAACc,IAA3C,IAAmD,WAAvE;AACAZ,IAAAA,SAAS,CAACW,WAAV,GAAyB,aAAYA,WAAY,GAAjD;AACH;;AAED,MAAKZ,GAAG,IAAID,aAAa,CAACe,eAA1B,EAA4C;AACxCb,IAAAA,SAAS,CAACa,eAAV,GAA4B,MAAMC,OAAN,IAAiB;AACzC;AACA;AACA,YAAMC,UAAU,GAAGX,oBAAoB,EAAvC,CAHyC,CAKzC;;AACAU,MAAAA,OAAO,CAACC,UAAR,GAAqBA,UAArB,CANyC,CAQzC;;AACA,YAAMC,SAAS,GAAG,OAAOlB,aAAa,CAACe,eAArB,KAAyC,UAAzC,GACZ,MAAMf,aAAa,CAACe,eAAd,CAA+BC,OAA/B,CADM,GAEZ,EAFN,CATyC,CAazC;;AACA,+BACOE,SADP;AAEIf,QAAAA,iBAAiB,EAAEc,UAAU,CAACE,QAAX;AAFvB;AAIH,KAlBD;AAmBH;;AAED,SAAOjB,SAAP;AACH,CA/CM;AAiDP,IAAIe,UAAJ;;AACA,MAAMX,oBAAoB,GAAGc,YAAY,IAAI;AACzC;AACA,YAAqC;AACjC,WAAOvB,eAAe,CAAEuB,YAAF,CAAtB;AACH,GAJwC,CAMzC;;;AACA,MAAK,CAACH,UAAN,EAAmB;AACfA,IAAAA,UAAU,GAAGpB,eAAe,CAAEuB,YAAF,CAA5B;AACH;;AAED,SAAOH,UAAP;AACH,CAZD","sourcesContent":["import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport initializeStore from '../redux/store';\r\nimport App from 'next/app';\r\n\r\nexport const withRedux = ( PageComponent, { ssr = true } = {} ) => {\r\n    const WithRedux = ( { initialReduxState, ...props } ) => {\r\n        const store = getOrInitializeStore( initialReduxState );\r\n        return (\r\n            <Provider store={store}>\r\n                <PageComponent {...props} />\r\n            </Provider>\r\n        );\r\n    };\r\n\r\n    // Make sure people don't use this HOC on _app.js level\r\n    if ( process.env.NODE_ENV !== 'production' ) {\r\n        const isAppHoc = PageComponent === App || PageComponent.prototype instanceof App;\r\n        if ( isAppHoc ) {\r\n            throw new Error( 'The withRedux HOC only works with PageComponents' );\r\n        }\r\n    }\r\n\r\n    // Set the correct displayName in development\r\n    if ( process.env.NODE_ENV !== 'production' ) {\r\n        const displayName = PageComponent.displayName || PageComponent.name || 'Component';\r\n        WithRedux.displayName = `withRedux(${displayName})`;\r\n    }\r\n\r\n    if ( ssr || PageComponent.getInitialProps ) {\r\n        WithRedux.getInitialProps = async context => {\r\n            // Get or Create the store with `undefined` as initialState\r\n            // This allows you to set a custom default initialState\r\n            const reduxStore = getOrInitializeStore();\r\n\r\n            // Provide the store to getInitialProps of pages\r\n            context.reduxStore = reduxStore;\r\n\r\n            // Run getInitialProps from HOCed PageComponent\r\n            const pageProps = typeof PageComponent.getInitialProps === 'function'\r\n                ? await PageComponent.getInitialProps( context )\r\n                : {};\r\n\r\n            // Pass props to PageComponent\r\n            return {\r\n                ...pageProps,\r\n                initialReduxState: reduxStore.getState()\r\n            };\r\n        }\r\n    }\r\n\r\n    return WithRedux;\r\n};\r\n\r\nlet reduxStore;\r\nconst getOrInitializeStore = initialState => {\r\n    // Always make a new store if server, otherwise state is shared between requests\r\n    if ( typeof window === 'undefined' ) {\r\n        return initializeStore( initialState );\r\n    }\r\n\r\n    // Create store if unavailable on the client and set it on the window object\r\n    if ( !reduxStore ) {\r\n        reduxStore = initializeStore( initialState );\r\n    }\r\n\r\n    return reduxStore;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}