{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\projects\\\\assessment-2\\\\components\\\\Reservation.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    padding: 1.25em;\\n\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    margin: 1.5em;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin: 0;\\n    padding: 12px;\\n    font-size: 0.85em;\\n    background-color: #e7e7e7;\\n\\n    &.default {\\n        padding-top: 15px;\\n        padding-bottom: 15px;\\n        font-weight: 600;\\n    }\\n\\n    input.hide {\\n        display: none;\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    flex: 1;\\n    margin-top: 10px;\\n    margin-right: 10px;\\n    border: 2px solid #cdd0df;\\n    border-radius: 4px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    display: flex;\\n    padding: 1.5em;\\n    flex-flow: row wrap;\\n    align-items: center;\\n    justify-content: space-between;\\n    font-family: sans-serif;\\n    width: 80%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport ReservationDetails from './ReservationDetails';\nimport { Reservation } from '../data/objects';\nimport { actions } from '../redux/modules';\nvar ReservationContainer = styled.section(_templateObject());\nvar ReservationBox = styled.div(_templateObject2());\nvar ReservationBoxTitle = styled.h4(_templateObject3());\nvar Button = styled.button(_templateObject4());\nvar StatusMessage = styled.div(_templateObject5());\n\nvar setReservationStatus = function setReservationStatus(checked, dispatch, roomNumber) {\n  var updateReservation = actions.updateReservation;\n  var reservation = new Reservation().reservationObj;\n  reservation.adultOccupancyCount = 1;\n  reservation.isSelected = checked;\n  reservation.roomNumber = roomNumber;\n  dispatch(updateReservation(reservation));\n};\n\nvar checkboxClickHandler = function checkboxClickHandler(roomNumber, index, availableRooms, event, dispatch) {\n  var checked = event.target.checked; // For the weird edge case should default room 1 checkbox be visible\n  // and user checks and unchecks, early exit so no store action is tied to this.\n\n  if (index === 0) {\n    return;\n  }\n\n  var loopCount = index;\n  var selectableRoomCount = availableRooms.length - 1;\n\n  if (checked) {\n    for (var step = 1; step < loopCount + 1; step++) {\n      var currentRoomNumber = roomNumber - (step - 1);\n      setReservationStatus(checked, dispatch, currentRoomNumber);\n    }\n  } else {\n    // Determine the number of times to loop and set 'isSelected' property to false to uncheck\n    loopCount = index === selectableRoomCount // if selected index is last room on room scale\n    ? 1 // loop once to uncheck only selected index\n    : index === 1 // if selected index is the first selecteable on room scale\n    ? selectableRoomCount // loop x times which equals amount of selectable rooms\n    : index; // loop x times which equals index number (this occurs for rooms in middle of scale)\n\n    for (var _step = 1; _step < loopCount + 1; _step++) {\n      var _currentRoomNumber = roomNumber + (_step - 1);\n\n      setReservationStatus(checked, dispatch, _currentRoomNumber);\n    }\n  }\n};\n\nvar submitHandler = function submitHandler(reservations, dispatch) {\n  var submitReservation = actions.submitReservation;\n  dispatch(submitReservation(reservations));\n};\n\nvar ReservationPage = function ReservationPage(_ref) {\n  var availableRooms = _ref.availableRooms,\n      dispatch = _ref.dispatch,\n      isReservationSubmitted = _ref.isReservationSubmitted,\n      reservations = _ref.reservations;\n  return __jsx(React.Fragment, null, __jsx(ReservationContainer, {\n    className: \"ut-reservation-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, availableRooms.map(function (room, index) {\n    var adultOccupancy = room.adultOccupancy,\n        childOccupancy = room.childOccupancy,\n        isDefaultSelection = room.isDefaultSelection,\n        roomNumber = room.roomNumber;\n    var reservation = reservations.filter(function (room) {\n      return room.roomNumber == roomNumber;\n    })[0] || {};\n    var isSelected = reservation.isSelected;\n    return __jsx(ReservationBox, {\n      key: roomNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(ReservationBoxTitle, {\n      className: isDefaultSelection ? 'default' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(\"label\", {\n      htmlFor: \"room-selection-\".concat(roomNumber),\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(\"input\", {\n      id: \"room-selection-\".concat(roomNumber),\n      className: isDefaultSelection ? 'hide' : '',\n      checked: isSelected,\n      name: \"room-selection-\".concat(roomNumber),\n      onChange: function onChange(event) {\n        return checkboxClickHandler(roomNumber, index, availableRooms, event, dispatch);\n      },\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), __jsx(\"span\", {\n      className: \"checkbox-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Room \", roomNumber))), __jsx(ReservationDetails, {\n      adultOccupancy: adultOccupancy,\n      childOccupancy: childOccupancy,\n      dispatch: dispatch,\n      reservation: reservation,\n      roomNumber: roomNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }));\n  })), __jsx(Button, {\n    className: \"ut-submit-button\",\n    name: \"submit\",\n    onClick: function onClick() {\n      submitHandler(reservations, dispatch);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Submit\"), isReservationSubmitted && __jsx(StatusMessage, {\n    className: \"ut-status-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Your reservation has been saved!\"));\n};\n\nexport default ReservationPage;","map":{"version":3,"sources":["C:/projects/assessment-2/components/Reservation.js"],"names":["React","styled","ReservationDetails","Reservation","actions","ReservationContainer","section","ReservationBox","div","ReservationBoxTitle","h4","Button","button","StatusMessage","setReservationStatus","checked","dispatch","roomNumber","updateReservation","reservation","reservationObj","adultOccupancyCount","isSelected","checkboxClickHandler","index","availableRooms","event","target","loopCount","selectableRoomCount","length","step","currentRoomNumber","submitHandler","reservations","submitReservation","ReservationPage","isReservationSubmitted","map","room","adultOccupancy","childOccupancy","isDefaultSelection","filter"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ReservationDetails from './ReservationDetails';\r\nimport { Reservation } from '../data/objects';\r\nimport { actions } from '../redux/modules';\r\n\r\nconst ReservationContainer = styled.section`\r\n    display: flex;\r\n    padding: 1.5em;\r\n    flex-flow: row wrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    font-family: sans-serif;\r\n    width: 80%;\r\n`\r\nconst ReservationBox = styled.div`\r\n    flex: 1;\r\n    margin-top: 10px;\r\n    margin-right: 10px;\r\n    border: 2px solid #cdd0df;\r\n    border-radius: 4px;\r\n`\r\n\r\nconst ReservationBoxTitle = styled.h4`\r\n    margin: 0;\r\n    padding: 12px;\r\n    font-size: 0.85em;\r\n    background-color: #e7e7e7;\r\n\r\n    &.default {\r\n        padding-top: 15px;\r\n        padding-bottom: 15px;\r\n        font-weight: 600;\r\n    }\r\n\r\n    input.hide {\r\n        display: none;\r\n    }\r\n`\r\n\r\nconst Button = styled.button`\r\n    margin: 1.5em;\r\n`\r\n\r\nconst StatusMessage = styled.div`\r\n    padding: 1.25em;\r\n\r\n`\r\n\r\nconst setReservationStatus = (\r\n    checked,\r\n    dispatch,\r\n    roomNumber\r\n) => {\r\n    const { updateReservation } = actions;\r\n    const reservation = new Reservation().reservationObj;\r\n    reservation.adultOccupancyCount = 1;\r\n    reservation.isSelected = checked;\r\n    reservation.roomNumber = roomNumber;\r\n\r\n    dispatch( updateReservation( reservation ) );\r\n};\r\n\r\nconst checkboxClickHandler = (\r\n    roomNumber,\r\n    index,\r\n    availableRooms,\r\n    event,\r\n    dispatch\r\n) => {\r\n    const { checked } = event.target;\r\n\r\n    // For the weird edge case should default room 1 checkbox be visible\r\n    // and user checks and unchecks, early exit so no store action is tied to this.\r\n    if ( index === 0 ) {\r\n        return;\r\n    }\r\n\r\n    let loopCount = index;\r\n    const selectableRoomCount = availableRooms.length - 1;\r\n\r\n    if ( checked ) {\r\n        for ( let step = 1; step < loopCount + 1; step++ ) {\r\n            const currentRoomNumber = roomNumber - ( step - 1 );\r\n            setReservationStatus( checked, dispatch, currentRoomNumber );\r\n        }\r\n    } else {\r\n        // Determine the number of times to loop and set 'isSelected' property to false to uncheck\r\n        loopCount = index === selectableRoomCount // if selected index is last room on room scale\r\n            ? 1 // loop once to uncheck only selected index\r\n            : index === 1 // if selected index is the first selecteable on room scale\r\n                ? selectableRoomCount // loop x times which equals amount of selectable rooms\r\n                : index; // loop x times which equals index number (this occurs for rooms in middle of scale)\r\n\r\n        for ( let step = 1; step < loopCount + 1; step++ ) {\r\n            const currentRoomNumber = roomNumber + ( step - 1 );\r\n            setReservationStatus( checked, dispatch, currentRoomNumber );\r\n        }\r\n    }\r\n};\r\n\r\n\r\nconst submitHandler = ( reservations, dispatch ) => {\r\n    const { submitReservation } = actions;\r\n    dispatch( submitReservation( reservations ) );\r\n};\r\n\r\nconst ReservationPage = ( {\r\n    availableRooms,\r\n    dispatch,\r\n    isReservationSubmitted,\r\n    reservations\r\n} ) => {\r\n\r\n    return (\r\n        <>\r\n            <ReservationContainer className=\"ut-reservation-container\">\r\n                {availableRooms.map( ( room, index ) => {\r\n                    const {\r\n                        adultOccupancy,\r\n                        childOccupancy,\r\n                        isDefaultSelection,\r\n                        roomNumber\r\n                    } = room;\r\n                    const reservation = reservations.filter( room => room.roomNumber == roomNumber )[0] || {};\r\n                    const { isSelected } = reservation;\r\n                    return (\r\n                        <ReservationBox key={roomNumber}>\r\n                            <ReservationBoxTitle className={ isDefaultSelection ? 'default' : '' }>\r\n                                <label htmlFor={`room-selection-${roomNumber}`}\r\n                                        className=\"\">\r\n                                    <input id={`room-selection-${roomNumber}`}\r\n                                        className={isDefaultSelection ? 'hide' : ''}\r\n                                        checked={isSelected}\r\n                                        name={`room-selection-${roomNumber}`}\r\n                                        onChange={(event) => checkboxClickHandler(roomNumber, index, availableRooms, event, dispatch)}\r\n                                        type=\"checkbox\"\r\n                                    />\r\n                                    <span className=\"checkbox-label\">Room {roomNumber}</span>\r\n                                </label>\r\n                            </ReservationBoxTitle>\r\n                            <ReservationDetails adultOccupancy={adultOccupancy}\r\n                                                childOccupancy={childOccupancy}\r\n                                                dispatch={dispatch}\r\n                                                reservation={reservation}\r\n                                                roomNumber={roomNumber}\r\n                            />\r\n                        </ReservationBox>\r\n                    );\r\n\r\n                } )}\r\n            </ReservationContainer>\r\n            <Button className=\"ut-submit-button\"\r\n                    name=\"submit\"\r\n                    onClick={() => { submitHandler( reservations, dispatch ) }}>\r\n                Submit\r\n            </Button>\r\n            { isReservationSubmitted &&\r\n                <StatusMessage className=\"ut-status-message\">Your reservation has been saved!</StatusMessage>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ReservationPage;\r\n"]},"metadata":{},"sourceType":"module"}